using ImageLibrary;
using ImageLibrary.Extensions;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ImageLibraryTests
{
    /// <summary>
    /// Provides Custom Output Types
    /// </summary>
    public static class CustomOutput
    {
        /// <summary>
        /// Static Comment
        /// </summary>
        private const string COMMENT = "# Created by ImageLibrary";

        /// <summary>
        /// Write a PPM image
        /// </summary>
        /// <param name="img">Image To Write</param>
        /// <param name="depth">Color Depth (255 for example)</param>
        /// <param name="location">Local To Write To</param>
        public static void WritePpm(this IImage<RGB> img, int depth, string location)
        {
            CustomOutput.WriteCommon(img.Normalize().MapAcross(x => x * depth), 
                depth, 
                "P3", 
                location,
                ".ppm",
                x => ((long)x.R) + " " + ((long)x.G) + " " + ((long)x.B));
        }

        public static void WritePpm(this IImage<double> img, int depth, string location)
        {
            CustomOutput.WriteCommon(img.Normalize().MapValue(x => x * depth),
                depth,
                "P3",
                location,
                ".ppm",
                x => ((long)x) + " " + ((long)x) + " " + ((long)x));
        }

        public static void WritePbm(this IImage<double> img, string location)
        {
            CustomOutput.WriteCommon(img,
                null,
                "P1",
                location,
                ".pbm",
                x => x == 0.0 ? '0' : '1');            
        }

        public static void WritePbm(this IImage<bool> img, string location)
        {
            CustomOutput.WriteCommon(img,
                null,
                "P1",
                location,
                ".pbm",
                x => x ? '0' : '1');
        }

        public static void WritePgm(this IImage<double> img, int depth, string location)
        {
            CustomOutput.WriteCommon(img
                .Normalize()
                .MapValue(x => x * depth), 
                depth, 
                "P2", 
                location,
                ".pgm",
                x => (long)x);
        }

        private static string GenerateComment()
        {
            return
                "# Generated by Image Library .NET" +
                "# " + DateTime.Now.ToString();
        }

        private static void WriteCommon<T>(IImage<T> img, int? depth, string type, string savePath, string ext, Func<T, object> action)
            where T : struct, IEquatable<T>
        {
            // Add Extension, if missing
            if (!savePath.EndsWith(ext, StringComparison.CurrentCultureIgnoreCase))
            {
                savePath += ext;
            }

            using (StreamWriter writer = new StreamWriter(savePath))
            {
                writer.Write(GenerateComment());
                writer.Write(type);
                writer.Write(Environment.NewLine);
                writer.Write(COMMENT);
                writer.Write(Environment.NewLine);
                writer.Write(img.Width);
                writer.Write(" ");
                writer.Write(img.Height);
                writer.Write(Environment.NewLine);
                // Depth missing for 2 color image
                if (depth != null) writer.Write(depth.Value);
                writer.Write(Environment.NewLine);

                for (int i = 0, y = 0; y < img.Height; y++)
                {
                    // Width
                    writer.Write(action(img[i++]));
                    for (int x = 1; x < img.Width; x++)
                    {
                        writer.Write(" ");
                        writer.Write(action(img[i++]));
                    }

                    // Height
                    writer.Write(Environment.NewLine);
                }
            }
        }
    }
}